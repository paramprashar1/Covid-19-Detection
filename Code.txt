from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Conv2D, MaxPooling2D, Flatten
from tensorflow.keras.preprocessing.image import ImageDataGenerator
import matplotlib.pyplot as plt
import cv2
print(">> IMAGE CLASSIFICATION MODEL CREATION")

print()

print(">> STEP#1 IMAGE PRE-PROCESSING")
train_image_generator = ImageDataGenerator(rescale=1.0/255)
test_image_generator = ImageDataGenerator(rescale=1.0/255)

training_images = train_image_generator.flow_from_directory(
                                        'C:/Users/Param Prashar/Desktop/Soft Computing Project/covid19dataset/train',
                                        target_size=(64, 64),
                                        batch_size=8,
                                        class_mode='binary')

testing_images = test_image_generator.flow_from_directory(
                                        'C:/Users/Param Prashar/Desktop/Soft Computing Project/covid19dataset/test',
                                        target_size=(64, 64),
                                        batch_size=8,
                                        class_mode='binary')
def plotImages(images):
    fig, axes = plt.subplots(1, 5, figsize=(20, 20))
    axes = axes.flatten()
    for img, ax in zip(images, axes):
        ax.imshow(img)
        ax.axis('off')
    plt.tight_layout()
    plt.show()

sample_training_images, _ = next(training_images)
# plotImages(sample_training_images[:5])


print(">> STEP#2 CREATE CNN MODEL")
model = Sequential()
model.add(Conv2D(32, (3, 3), activation='relu', input_shape=(64, 64, 3)))
model.add(MaxPooling2D((2, 2)))
model.add(Conv2D(32, (3, 3), activation='relu'))
model.add(MaxPooling2D((2, 2)))

model.add(Flatten())
model.add(Dense(128, activation='relu'))
model.add(Dense(1, activation='sigmoid'))

print(">> STEP#3 TRAIN THE MODEL")
model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])


history = model.fit_generator(training_images, epochs=5, validation_data=testing_images)

print(">> STEP#4 VISUALIZING ACCURACY AND LOSS")
acc = history.history['accuracy']
val_acc = history.history['val_accuracy']

loss = history.history['loss']
val_loss = history.history['val_loss']

epochs_range = range(5)

plt.figure(figsize=(8, 8))
plt.subplot(1, 2, 1)
plt.plot(epochs_range, acc, label='Training Accuracy')
plt.plot(epochs_range, val_acc, label='Validation Accuracy')
plt.legend(loc='lower right')
plt.title('ACCURACY')

plt.subplot(1, 2, 2)
plt.plot(epochs_range, loss, label='Training Loss')
plt.plot(epochs_range, val_loss, label='Validation Loss')
plt.legend(loc='upper left')
plt.title('LOSS')

plt.show()


model.save("model.h5")  
model.save("model")      
print(">> MODEL SAVED :)")



---------------------------------------------------------------------------------------------------------------




from tensorflow.keras.models import load_model
import cv2
import numpy as np

model = load_model("C:/Users/Param Prashar/Desktop/Soft Computing Project/model.h5")
model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

# image = cv2.imread("C:/Users/Param Prashar/Desktop/Soft Computing Project/covid19dataset/test/normal/NORMAL2-IM-1385-0001.jpeg")    # 1
image = cv2.imread("C:/Users/Param Prashar/Desktop/Soft Computing Project/covid19dataset/test/covid/nejmoa2001191_f3-PA.jpeg")    # 0
image = cv2.resize(image, (64, 64))
image = np.reshape(image, [1, 64, 64, 3])

classes = model.predict_classes(image)
label = ["COVID-19 INFECTED", "NORMAL"]
print(classes)
print(label[classes[0][0]])


